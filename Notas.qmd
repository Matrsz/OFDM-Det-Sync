---
title: "Notas Proyecto Integrador"
author: "Matías Roqueta"
format:
  html: 
    embed-resources: true
    theme: superhero
jupyter: julia-1.7
---

## Transmisión OFDM en el estándar IEEE 802.11a

- PSDU: PHY Service Data Unit
- PPDU: PHY Protocol Data Unit

### TXVECTOR

El TXVECTOR es una serie de parámetros provistos por la capa MAC a la capa PHY para transmitir un PSDU. Mínimamente contiene los parámetros **DATARATE** Y **LENGTH**. En particular para OFDM contiene

| Parámetro | Valores | Descripción |
| --- | --- | --- |
| LENGTH | 1 - 4095 | El número de octetos que la capa MAC necesita transmitir |
| DATARATE | Distintas tasas según el espacio entre canales (20, 10 o 5 MHz) | La tasa de bits a la que se transmitirá la PSDU |
| SERVICE | Null | Siempre es Null |
| TXPWR_LEVEL_INDEX | 1-8 | Cual de los posibles TxPowerLevel definidos en la MIB serán usados en la transmisión |
| TIME_OF_DEPARTURE_REQUESTED | False o True | Determina si la capa MAC solicita tiempo de primer transmisión a la capa PHY |
| CH_BANDWIDTH_IN_NON_HT | Opcional: CBW20, CBW40, CBW80, CBW160, O CBW80+80 | Si está presente, modifica los primeros 7 bits de la secuencia de entrelazado |
| DYN_BANDWIDTH_IN_NON_HT | Opcional: Static o Dynamic | Si es presente, modifica los primeros 7 bits de la secuencia de entrelazado |

Transmitir una trama implica tomar una PSDU y codificarla en una PPDU que se transmite por el canal inalámbrico.

<!-- \begin{center}
\begin{bytefield}[bitformatting={\footnotesize\bfseries}]{40} 
\bitheader{0, 4, 5, 17, 18, 24, 40}\\
\bitbox{4}{RATE\\4 bits} & 
\bitbox{1}{\rotatebox{-90}{RES}} & 
\bitbox{12}{LENGTH\\12 bits} & 
\bitbox{1}{\rotatebox{-90}{PAR}} & 
\bitbox{6}{Tail\\6 bits} & 
\bitbox{16}{SERVICE\\16 bits}
\bitbox[]{2}{$\cdots$}
\end{bytefield}
\end{center} -->

```{julia}
#| echo: false
#| output: false

using Kroki
using Base: Fix1, Fix2

Diagram(:packetdiag, """
{
  default_linecolor = white
  default_node_color = none
  default_textcolor = white
  colwidth = 40
  node_height = 50
  node_width = 18
  default_fontsize = 18
  scale_interval = 8
  * RATE [len=4, label="RATE\n4 bits"]
  * RES [len=1, rotate=90]
  * LENGTH [len=12, label="LENGTH\n12 bits"]
  * PAR [len=1, rotate=90]
  * TAIL [len=6, label="TAIL\n6 bits"]
  * SERVICE [len=16, label="SERVICE\n16 bits"]
}""") |> Fix2(render, "svg") |> Fix1(write, "Images/packet.svg")
```

![PHY Header en el estándar 802.11a. RATE, un bit reservado, LENGTH, un bit de paridad, y TAIL corresponden al símbolo SIGNAL.](Images/packet.svg)

Los primeros 24 bits corresponden un símbolo OFDM, llamado SIGNAL. Se transmite:

- PHY Preamble: 12 símbolos OFDM
- SIGNAL: 1 símbolo OFDM
- DATA: N símbolos OFDM

```{julia}
#| echo: false
#| output: false

Diagram(:packetdiag, """
{
  default_linecolor = white
  default_node_color = none
  default_textcolor = white
  colwidth = 3
  node_height = 50
  node_width = 300
  default_fontsize = 18
  scale_interval = 1
  * PREAMBLE [len=1, label="PHY Preamble: 12 simbolos"]
  * SIGNAL [len=1, label="SIGNAL: 1 simbolo\nBPSK, Tasa = 1/2"]
  * DATA [len=1, label="DATA: N simbolos\nMod. y tasa según SIGNAL"]
}""") |> Fix2(render, "svg") |> Fix1(write, "Images/packet2.svg")
```

![PHY Preamble en el estándar 802.11a](Images/packet2.svg)

### PHY Preamble
El PHY Preamble consiste en:

- 10 iteraciones de una _short training sequence_ 
- 2 iteraciones de una _long training sequence_

### PHY Header

Todo se construye a partir del TXVECTOR

- RATE, LENGTH: Obtenidos del TXVECTOR, se le agrega un bit de paridad par y un TAIL de 000000. Son codificados por un código convolucional a tasa 1/2, y asigados un único símbolo ODFM llamado SIGNAL que es transmitido con codificación BPSK.
- A partir de RATE del TXVECTOR se calcula
  - $R$: la tasa de codificación
  - $N_{DBPS}$: el número de bits _de datos_ por símbolo OFDM
  - $N_{CBPS}$: el número de bits _codificados_ por símbolo OFDM
  - $N_{BPSC}$: el número de bits por sub-portadora OFDM
- El PSDU se concatena a SERVICE de TXVECTOR. Se extiende con bits 0 (mínimo 6) hasta completar N símbolos OFDM. Esto es la secuencia de símbolos DATA.


## Sincronización OFDM

## Modelo Canal OFDM

Para transmitir datos en un canal OFDM con $N_C$ canales, se necesita subdividir en tramas de longitud $N$

- $N_C$: Longitud en símbolos de datos de una trama
- $L$: Longitud en símbolos de la ISI
- $N_T$: Longitud de símbolos transmitidos por el canal. Para no tener ISI se necesita $N_T = N_C+L-1$

La transmisión de datos en un canal OFDMA sigue el siguiente método:

- A un vector de datos $\mathbf{\tilde x}$ de longitud $N_C$ se le aplica la transformada inversa de Fourier, obteniendo 
$$\mathbf x = \mathcal F^{-1}[\mathbf{\tilde x}]$$
- A $\mathbf x$ se le agregan $L-1$ símbolos de prefijo cíclico, obteniendo el vector $\mathbf{\bar x}$ de longitud $N_T$.
$$ \mathbf{\bar x} = \begin{bmatrix}x_{N_C-L+1} & \cdots & x_{N_C-1} & x_0 & \cdots & x_{N_C-1} \end{bmatrix} $$
- El vector $\mathbf{\bar x}$ se transmite por el canal $\mathbf h$, obteniendo 
$$\mathbf{\bar y} = \mathbf h \ast \mathbf{\bar x} + \mathbf w$$
- Se ignora el prefijo de $\mathbf{\bar y}$, quedándose únicamente con los últimos $N_C$ símbolos
$$\mathbf y = \begin{bmatrix}\bar y_L & \cdots & \bar y_{N_C+L-1}\end{bmatrix}$$
- A $\mathbf y$ se le aplica la transformada de Fourier, obteniendo el vector final recibido
$$\mathbf{\tilde y} = \mathcal F[\mathbf{y}]$$

```{julia}
#| echo: false
#| output: false

Diagram(:blockdiag, """
{
  default_fontsize = 20
  node_height = 70
  node_width = 100
  default_group_color = none
  default_linecolor = white
  default_textcolor = white
  default_node_color = none

  IFFT [label="IFFT"]
  CY [label="Cyclic\nPrefix"]
  CH [label="Channel"]
  RP [label="Remove\nPrefix"]
  FFT [label="FFT"]
  TX [label="TX", width=70, shape=circle]
  RX [label="RX", width=70, shape=circle]
  
  TX -> IFFT 
  group{ 
    IFFT -> CY 
  group {
    orientation = portrait
    CY -> CH -> RP [thick]
  }
  RP -> FFT
  }
  FFT -> RX
}""") |> Fix2(render, "svg") |> Fix1(write, "Images/channel.svg")
```

![Estructura de un canal OFDM](Images/channel.svg)

La relación final entre el vector transmitido $\mathbf{\tilde x}$, el vector recibido $\mathbf{\tilde y}$, y el canal $\mathbf h$ es
$$
  \mathbf{\tilde y} = \mathbf{\tilde h}^\star \mathbf{\tilde x} + \mathbf{\tilde w}
$$
En donde (asumo, porque el Tse no es super explícito al respecto) que $\mathbf{\tilde h} = \mathcal F[\mathbf h]$. Efectivamente se usa la identidad
$$
  \mathbf y = \mathbf h \ast \mathbf x + \mathbf w \longleftrightarrow \mathbf{\tilde y} = \mathbf{\tilde h}^\star \mathbf{\tilde x} + \mathbf{\tilde w}
$$

### Prefijos cíclicos

Esto no está en el Tse, pero agregar o quitar prefijos cíclicos podría ser interpretado como operaciones matriciales

Ej con $N_C=5$ y $L=4$ entonces $N_T=8$

- Agregar prefijo: 
$$
\begin{bmatrix}
x_2 \\ x_3 \\ x_4 \\ x_0 \\ x_1 \\ x_2 \\ x_3 \\ x_4
\end{bmatrix} = 
\begin{bmatrix}
0 & 0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1 & 0 \\
0 & 0 & 0 & 0 & 1 \\
1 & 0 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 & 0 \\
0 & 0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1 & 0 \\
0 & 0 & 0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
x_0 \\ x_1 \\ x_2 \\ x_3 \\ x_4
\end{bmatrix}
$$

- Quitar prefijo: 
$$\begin{bmatrix}
y_3 \\ y_4 \\ y_5 \\ y_6 \\ y_7
\end{bmatrix} = 
\begin{bmatrix}
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
y_0 \\ y_1 \\ y_2 \\ y_3 \\ y_4 \\ y_5 \\ y_6 \\ y_7
\end{bmatrix}
$$

Ya que los demás procedimientos, FFT, IFFT, convolución circular, eventualmente códigos de corrección de errores, eventualmente entrelazado (tampoco lo menciona el Tse), etc son operaciones matriciales, esta interpretación puede resultar útil